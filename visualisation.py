#!/usr/bin/env python3
"""
Fluid Simulation Visualizer

This script visualizes the PLY files generated by the CUDA fluid simulation.
"""

import argparse
import glob
import os
import sys
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.animation as animation
from plyfile import PlyData
import time

def read_ply_file(filename):
    """Read a PLY file and return the particle positions and colors"""
    try:
        plydata = PlyData.read(filename)
        vertex = plydata['vertex']
        
        # Extract positions
        positions = np.vstack((vertex['x'], vertex['y'], vertex['z'])).T
        
        # Extract colors
        colors = np.vstack((vertex['red'], vertex['green'], vertex['blue'])).T / 255.0
        
        return positions, colors
    except Exception as e:
        print(f"Error reading PLY file {filename}: {e}")
        return None, None

def visualize_static(ply_file):
    """Visualize a single frame of the simulation"""
    positions, colors = read_ply_file(ply_file)
    if positions is None:
        return
    
    fig = plt.figure(figsize=(10, 8))
    ax = fig.add_subplot(111, projection='3d')
    
    # Plot particles as scatter points
    ax.scatter(positions[:, 0], positions[:, 1], positions[:, 2], 
               color=colors, s=10, alpha=0.8)
    
    # Set axis limits and labels
    ax.set_xlim([0, 1])
    ax.set_ylim([0, 1.5])
    ax.set_zlim([0, 1])
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')
    ax.set_title('Fluid Simulation Visualization')
    
    plt.tight_layout()
    plt.show()

def visualize_animation(frame_pattern, output_file=None, fps=30):
    """Create an animation from multiple frames"""
    # Find all frame files that match the pattern
    frame_files = sorted(glob.glob(frame_pattern))
    if not frame_files:
        print(f"No files found matching pattern: {frame_pattern}")
        return
    
    print(f"Found {len(frame_files)} frames")
    
    # Read the first frame to initialize the plot
    positions, colors = read_ply_file(frame_files[0])
    if positions is None:
        return
    
    fig = plt.figure(figsize=(10, 8))
    ax = fig.add_subplot(111, projection='3d')
    
    # Initial scatter plot
    scatter = ax.scatter(positions[:, 0], positions[:, 1], positions[:, 2], 
                         color=colors, s=10, alpha
